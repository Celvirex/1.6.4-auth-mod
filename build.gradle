plugins {
    id 'java'
    id 'xyz.wagyourtail.unimined' version '1.1.1-SNAPSHOT'
    id "maven-publish"
}

group project.maven_group
version project.version

base {
    archivesName = project.archives_base_name
}

repositories {
    maven {
        name = "wagyourtail releases"
        url = "https://maven.wagyourtail.xyz/releases"
    }
    maven {
        name = "sponge"
        url = "https://repo.spongepowered.org/maven"
    }
    mavenCentral()
}

unimined.minecraft {
    version project.minecraft_version

    legacyFabric {
        loader project.loader_version
    }

    mappings {
        if (Boolean.parseBoolean(project.use_yarn)) {
            legacyYarn(project.yarn_build)
        } else {
            if (Boolean.parseBoolean(project.use_mcp_from_forge)) {
                forgeBuiltinMCP(project.forge_version)
            } else {
                searge()
                mcp(project.mcp_channel, project.mcp_version + "-" + project.minecraft_version)
            }
        }
    }

    minecraftRemapper.config {
        if (!Boolean.parseBoolean(project.use_yarn)) {
            // most mcp mappings (except older format) dont include field desc
            ignoreFieldDesc(true)
        }

        ignoreConflicts(true)
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

dependencies {
    // Fabric API provides hooks for events, item registration, and more. As most mods will need this, it's included by default.
    // If you know for a fact you don't, it's not required and can be safely removed.
    modImplementation ("net.legacyfabric.legacy-fabric-api:legacy-fabric-api:${project.fabric_version}")

    // You can retrieve a specific api module using this notation.
//	modImplementation(fabricApi.legacyFabricModule("legacy-fabric-item-groups-v1", project.fabric_version))
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${base.archivesName.get()}" }
    }
}

tasks.withType(JavaCompile).configureEach {
    // Ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    it.options.encoding = "UTF-8"

    if (JavaVersion.current().isJava9Compatible()) {
        it.options.release = 8
    }
}

// Configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // Select the repositories you want to publish to
    repositories {
        // Uncomment to publish to the local maven
        // mavenLocal()
    }
}